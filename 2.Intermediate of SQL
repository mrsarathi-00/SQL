////////////////////////////////////////////////////////////////////////////////////////////////////////  Problems using GROUP BY operation:

1. Count how many movies were released each year, ordered by year ascending.

SELECT COUNT(movie_name) as movie_count ,yr
FROM movie
GROUP BY yr
ORDER BY yr;

2. Find the total budget of movies released in each year, ordered by total budget descending.

select sum(budget) as total_budget, yr  
from movie 
group by yr
order by total_budget desc; 

3. Find the average collection of movies for each year, ordered by average collection descending.

select avg(collection)  as avg_collection ,yr
from movie 
group by yr
order by avg_collection desc;

4. List each year and total collection, ordered by total collection ascending.

select sum(collection) as total_collections , yr  
from movie 
group by yr
order by total_collections desc; 

5. Count how many movies with a budget greater than 150 million were released each year, ordered by year descending.

select count(movie_name),yr 
from movie 
where budget>150 
group by yr 
order by yr desc;

////////////////////////////////////////////////////////////////////////////////////////////////////////  What is CONSTRAIN ?:

* In SQL, constraints are rules enforced on data in a table to maintain data integrity, accuracy, and consistency. 
* These rules restrict the type of data that can be inserted into a column or a set of columns.

Common Types of SQL Constraints:

$ NOT NULL	      : Ensures that a column cannot have a NULL value.
$ UNIQUE	        : Ensures all values in a column (or a group of columns) are unique.
$ PRIMARY         : KEY	Uniquely identifies each record in a table; it is a combination of NOT NULL and UNIQUE.
$ FOREIGN         : KEY	Ensures referential integrity by linking a column (or columns) in one table to the primary key in another table.
$ CHECK	          : Ensures that all values in a column satisfy a specific condition.
$ DEFAULT	        : Provides a default value for a column when no value is specified.

 1. NOT NULL
👉 This means: "Don't leave this field empty."

CREATE TABLE Students (
    Name VARCHAR(100) NOT NULL
);

📌 What it does: You must enter a name. If you try to insert a student without a name, it will give an error.

-- ❌ This will give an error because Name is NOT NULL
INSERT INTO Students (Name) VALUES (NULL);


 2. UNIQUE
👉 This means: "Every value must be different (no duplicates)."

CREATE TABLE Students (
    Email VARCHAR(100) UNIQUE
);

📌 What it does: No two students can have the same email.

INSERT INTO Students (Email) VALUES ('a@gmail.com');  -- ✅ OK
INSERT INTO Students (Email) VALUES ('b@gmail.com');  -- ✅ OK
INSERT INTO Students (Email) VALUES ('a@gmail.com');  -- ❌ ERROR: duplicate email

3. PRIMARY KEY
👉 This means: "This column is used to identify each row uniquely."
Also, it is NOT NULL + UNIQUE together.

CREATE TABLE Students (
    RollNo INT PRIMARY KEY,
    Name VARCHAR(100)
);

📌 What it does: Each student must have a unique RollNo, and it can't be empty.

INSERT INTO Students (RollNo, Name) VALUES (1, 'Ramesh'); -- ✅ OK
INSERT INTO Students (RollNo, Name) VALUES (1, 'Sita');   -- ❌ ERROR: duplicate RollNo

 4. FOREIGN KEY
👉 This means: "This value must exist in another table."
It links two tables.

CREATE TABLE Classes (
    ClassID INT PRIMARY KEY
);

CREATE TABLE Students (
    RollNo INT PRIMARY KEY,
    ClassID INT,
    FOREIGN KEY (ClassID) REFERENCES Classes(ClassID)
);

📌 What it does: You can't insert a student with a class that doesn't exist.

INSERT INTO Classes VALUES (1); -- ✅ OK
INSERT INTO Students VALUES (101, 1); -- ✅ OK (class exists)

INSERT INTO Students VALUES (102, 2); -- ❌ ERROR: ClassID 2 doesn't exist

5. CHECK
👉 This means: "Only allow values that meet this condition."

CREATE TABLE Students (
    Name VARCHAR(100),
    Age INT CHECK (Age >= 10)
);

📌 What it does: You can only insert students with age 10 or more.

INSERT INTO Students VALUES ('Anil', 14); -- ✅ OK
INSERT INTO Students VALUES ('Sunita', 9); -- ❌ ERROR: age must be >= 10

📦 6. DEFAULT
👉 This means: "If nothing is given, use this value."

CREATE TABLE Students (
    Name VARCHAR(100),
    Class VARCHAR(10) DEFAULT '8A'
);

📌 What it does: If you don’t enter class, it will automatically use '8A'.

INSERT INTO Students (Name) VALUES ('Kiran');  
-- ✅ Class will be set to '8A' automatically


////////////////////////////////////////////////////////////////////////////////////////////////////////  Problems using Constraints operation:

--  for having constrains we need to create even column in the table. so create column like 
* director	
* genre	
* rating	
* release_date	
* certificate		
* runtime	
* language
* country	
* studio

-- Alter table @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ALTER TABLE movie 
ADD director VARCHAR(100) NOT NULL,
ADD genre VARCHAR(50) CHECK (genre IN ('Action', 'Drama', 'Sci-Fi', 'Comedy', 'Horror', 'Romance')),
ADD rating DECIMAL(3,1) CHECK (rating BETWEEN 0 AND 10),
ADD release_date DATE,
ADD certificate VARCHAR(10) CHECK (certificate IN ('U', 'UA', 'A', 'R', 'PG-13')),
ADD runtime INT CHECK (runtime BETWEEN 40 AND 300),
ADD language VARCHAR(50) DEFAULT 'English',
ADD country VARCHAR(100) DEFAULT 'USA',
ADD studio VARCHAR(100);

-- update table values @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

UPDATE movie SET 
  director = 'James Cameron',
  genre = 'Sci-Fi',
  rating = 7.9,
  release_date = '2009-12-18',
  certificate = 'UA',
  runtime = 162,
  language = 'English',
  country = 'USA',
  studio = '20th Century Fox'
WHERE id = 1;

UPDATE movie SET 
  director = 'James Cameron',
  genre = 'Romance',
  rating = 7.8,
  release_date = '1997-12-19',
  certificate = 'UA',
  runtime = 195,
  language = 'English',
  country = 'USA',
  studio = '20th Century Fox'
WHERE id = 2;

UPDATE movie SET 
  director = 'Christopher Nolan',
  genre = 'Action',
  rating = 9.0,
  release_date = '2008-07-18',
  certificate = 'UA',
  runtime = 152,
  language = 'English',
  country = 'USA',
  studio = 'Warner Bros.'
WHERE id = 3;

UPDATE movie SET 
  director = 'Anthony & Joe Russo',
  genre = 'Action',
  rating = 8.4,
  release_date = '2019-04-26',
  certificate = 'UA',
  runtime = 181,
  language = 'English',
  country = 'USA',
  studio = 'Marvel Studios'
WHERE id = 4;

UPDATE movie SET 
  director = 'Todd Phillips',
  genre = 'Drama',
  rating = 8.4,
  release_date = '2019-10-04',
  certificate = 'A',
  runtime = 122,
  language = 'English',
  country = 'USA',
  studio = 'Warner Bros.'
WHERE id = 5;

UPDATE movie SET 
  director = 'Christopher Nolan',
  genre = 'Sci-Fi',
  rating = 8.6,
  release_date = '2014-11-07',
  certificate = 'UA',
  runtime = 169,
  language = 'English',
  country = 'USA',
  studio = 'Paramount Pictures'
WHERE id = 6;

UPDATE movie SET 
  director = 'Ryan Coogler',
  genre = 'Action',
  rating = 7.3,
  release_date = '2018-02-16',
  certificate = 'UA',
  runtime = 134,
  language = 'English',
  country = 'USA',
  studio = 'Marvel Studios'
WHERE id = 7;

UPDATE movie SET 
  director = 'James Wan',
  genre = 'Action',
  rating = 7.1,
  release_date = '2015-04-03',
  certificate = 'UA',
  runtime = 137,
  language = 'English',
  country = 'USA',
  studio = 'Universal Pictures'
WHERE id = 8;

UPDATE movie SET 
  director = 'Jon Favreau',
  genre = 'Drama',
  rating = 6.8,
  release_date = '2019-07-19',
  certificate = 'U',
  runtime = 118,
  language = 'English',
  country = 'USA',
  studio = 'Walt Disney'
WHERE id = 9;

UPDATE movie SET 
  director = 'Gabriele Muccino',
  genre = 'Drama',
  rating = 8.0,
  release_date = '2006-12-15',
  certificate = 'UA',
  runtime = 117,
  language = 'English',
  country = 'USA',
  studio = 'Columbia Pictures'
WHERE id = 10;

////////////////////////////////////////////////////////////////////////////////////////////////////////  Problems using Function:

Q1.
Write a query to show the movie name, director, and rating of all movies that were released after the year 2010.

SELECT movie_name, rating, director 
FROM movie 
WHERE yr > 2010;

Q2.
Write a query to find the highest-grossing movie (i.e., the one with the maximum collection).
Show: movie_name, collection, and studio.

SELECT movie_name, collection, studio
FROM movie
WHERE collection = (SELECT MAX(collection) FROM movie);

Q3.
Write a query to find all movies where the collection is more than double the budget.
Show: movie_name, budget, collection, rating, studio

SELECT movie_name, budget, rating, studio, collection 
FROM movie 
WHERE collection > (budget * 2);

Q4.
Write a query to show the top 3 highest-rated movies.
Show: movie_name, rating, and director

SELECT movie_name, rating, director 
FROM movie 
ORDER BY rating DESC 
LIMIT 3;

Q5.
Write a query to find the average rating of movies for each genre — but only include genres where the average rating is more than 7.5.

SELECT genre, ROUND(AVG(rating), 2) AS ave_rating 
FROM movie 
GROUP BY genre 
HAVING AVG(rating) > 7.5
ORDER BY ave_rating DESC;

select movie_name,yr,genre,rating,studio from movie 
where genre in ('Action','Drama') and yr>2010 and rating >=8 
and studio !='Marvel Studios' order by rating desc;





















